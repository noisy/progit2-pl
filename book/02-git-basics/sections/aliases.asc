[[_git_aliases]]
=== Aliasy

(((aliases)))
Przed zakończeniem tego rozdziału, przedstawimy jeszcze jedną wskazówkę, która uczyni pracę z gitem prostszą, łatwiejszą i przyjazną: aliasy.

Nie odnosiliśmy się do nich ani nie zakładaliśmy, że skorzystasz z nich w dalszej części książki, ale powinieneś wiedzieć jak ich używać.

Git nie wydedukuje sam polecenia jeśli wpiszesz je częściowo i wciśniesz Enter.
Jeśli nie chcesz w całości wpisywać całego tekstu polecenia możesz łatwo stworzyć dla niego alias używając `git config`.(((git commands, config)))
Oto kilka przykładów, które mogą ci się przydać:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

Oznacza to, że na przykład, zamiast wpisywać `git commit`, wystarczy, że wpiszesz `git ci`.
Z czasem zaczniesz też stosować także inne polecenia regularnie, nie wahaj się wówczas tworzyć sobie dla nich nowych aliasów.

Technika ta jest także bardzo przydatna do tworzenia poleceń, które uważasz, że powinny istnieć a których brakuje ci w zwięzłej formie.
Na przykład, aby skorygować problem z intuicyjnością obsługi usuwania plików z poczekalni, możesz dodać do Gita własny, ułatwiający to alias:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

W ten sposób dwa poniższe polecenia są sobie równoważne:

[source,console]
----
$ git unstage fileA
$ git reset HEAD fileA
----

Od razu polecenie wygląda lepiej.
Dość częstą praktyką jest także dodawanie polecenia `last`:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

Możesz dzięki niemu łatwo zobaczyć ostatnią rewizję:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Jak można zauważyć, Git zastępuje nowe polecenie czymkolwiek co do niego przypiszesz.
Jednakże, możesz chcieć także uruchomić zewnętrzne polecenie zamiast polecenia Gita.
Rozpocznij je wówczas znakiem wykrzyknika `!`.
Przydaje się to podczas tworzenia własnego narzędzia, które współpracuje z repozytorium Gita.
Możemy pokazać to na przykładzie aliasu `git visual` uruchamiającego `gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
